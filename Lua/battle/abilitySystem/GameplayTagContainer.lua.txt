local TableUtils = require("battle.utils.TableUtils")

---@class GameplayTagContainer
---@field New fun(): GameplayTagContainer
local GameplayTagContainer = battle.class("GameplayTagContainer")

function GameplayTagContainer:Ctor()
    ---@type table<string, number>
    self._countMap = {}
    ---@type GamePlayTag[]
    self._tagList = {}
end

---@param tag GamePlayTag
function GameplayTagContainer:AddTag(tag)
    local count = self._countMap[tag.hashCode] or 0
    if count == 0 then
        table.insert(self._tagList, tag)
    end
    count = count + 1
    self._countMap[tag.hashCode] = count
end

---@param tags GamePlayTag[]
function GameplayTagContainer:AddTags(tags)
    for i, tag in ipairs(tags) do
        self:AddTag(tag)
    end
end

---@param tag GamePlayTag
function GameplayTagContainer:RemoveTag(tag)
    local count = self._countMap[tag.hashCode] or 0
    if count > 0 then
        count = count - 1
        self._countMap[tag.hashCode] = count

        if count == 0 then
            TableUtils.RemoveListItem(self._tagList, tag)
        end
    end
end

---@param tags GamePlayTag[]
function GameplayTagContainer:RemoveTags(tags)
    for i, tag in ipairs(tags) do
        self:RemoveTag(tag)
    end
end

---@param tags GamePlayTag[]
function GameplayTagContainer:HasAny(tags)
    for i, tag in ipairs(tags) do
        local count = self._countMap[tag.hashCode] or 0
        if count > 0 then
            return true
        end
    end
    return false
end

---@param tags GamePlayTag[]
function GameplayTagContainer:HasAll(tags)
    for i, tag in ipairs(tags) do
        local count = self._countMap[tag.hashCode] or 0
        if count <= 0 then
            return false
        end
    end
    return true
end

return GameplayTagContainer