---@class battle.Condition
local Condition = battle.class("Condition")

function Condition:Ctor()
    self._state = nil
    ---@type battle.ConditionTrigger[]
    self._triggers = {}
    self.onChanged = battle.Delegate.New()
end

---@param trigger battle.ConditionTrigger
function Condition:AddTrigger(trigger)
    table.insert(self._triggers, trigger)
    trigger.onTrigger:Add(battle.bind(self, self.CheckInternal))
    trigger:OnAdded()
end

---@private
function Condition:CheckInternal()
    local state = self:Check()
    if self._state ~= state then
        self._state = state
        self.onChanged:Invoke(state)
    end
end

function Condition:Check()
    return nil
end

function Condition:Destroy()
    for i, trigger in ipairs(self._triggers) do
        trigger:OnRemoved()
    end
    self._triggers = {}
    self.onChanged:Clear()
end

return Condition